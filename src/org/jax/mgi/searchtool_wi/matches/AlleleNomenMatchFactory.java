package org.jax.mgi.searchtool_wi.matches;

// standard java classes
import java.util.*;
import java.io.IOException;

// lucene
import org.apache.lucene.search.Hit;

// QS shared classes
import org.jax.mgi.shr.searchtool.IndexConstants;

// MGI Shared Classes
import org.jax.mgi.shr.config.Configuration;
import org.jax.mgi.shr.timing.TimeStamper;


/**
* A AlleleNomenMatchFactory is responsible for AlleleNomenMatch object creation and
*  data initialization
*/
public class AlleleNomenMatchFactory extends AbstractMatchFactory
{

  // special boost for matches to allele or marker symbol
  private static int SYMBOL_BOOST = 500;

  // boost for matches to other types of nomenclature
  private static int OTHER_NOMEN_BOOST = 250;

  //-------------//
  // Constructor //
  //-------------//

  /**
  * Constructs the factory, calling the parent class constructor with config
  */
  public AlleleNomenMatchFactory(Configuration c)
  {
    super(c);
  }

  //------------------------------------//
  // Over-ridden Parent Abstract Method
  //------------------------------------//

  /**
  * Generates and initializes a AlleleNomenMatch
  */
  public AlleleNomenMatch getMatch(Hit h)
    throws IOException
  {
    // match type generated by this factory
    AlleleNomenMatch alleleNomenMatch = new AlleleNomenMatch();

    // use parent class's implementation to fill basic information about match
    this.setHit(h);
    this.loadAbstractMatchInfo(alleleNomenMatch);

    // fill data specific to this match type
    alleleNomenMatch.setIsCurrent( hit.get(IndexConstants.COL_IS_CURRENT) );

    // prioritize matches to allele and marker symbols, secondarily matches to
    // other types of nomenclature

    String dataType = alleleNomenMatch.getDataType();
    if ((dataType != null) &&
	("current symbol".equals(dataType) ||
	 "allele symbol".equals(dataType)) ) {
	alleleNomenMatch.addScore(SYMBOL_BOOST);
    } else {
	alleleNomenMatch.addScore(OTHER_NOMEN_BOOST);
    }
    return alleleNomenMatch;

  }
}

